'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _pick2 = require('lodash/fp/pick');var _pick3 = _interopRequireDefault(_pick2);var _mapValues2 = require('lodash/fp/mapValues');var _mapValues3 = _interopRequireDefault(_mapValues2);var _compose2 = require('lodash/fp/compose');var _compose3 = _interopRequireDefault(_compose2);var _isNil2 = require('lodash/fp/isNil');var _isNil3 = _interopRequireDefault(_isNil2);var _negate3 = require('lodash/fp/negate');var _negate4 = _interopRequireDefault(_negate3);var _filter2 = require('lodash/fp/filter');var _filter3 = _interopRequireDefault(_filter2);var _defaults2 = require('lodash/defaults');var _defaults3 = _interopRequireDefault(_defaults2);var _keys2 = require('lodash/keys');var _keys3 = _interopRequireDefault(_keys2);var _constant2 = require('lodash/constant');var _constant3 = _interopRequireDefault(_constant2);var _isFunction2 = require('lodash/isFunction');var _isFunction3 = _interopRequireDefault(_isFunction2);var _isString2 = require('lodash/isString');var _isString3 = _interopRequireDefault(_isString2);var _negate5 = require('lodash/negate');var _negate6 = _interopRequireDefault(_negate5);var _noop2 = require('lodash/noop');var _noop3 = _interopRequireDefault(_noop2);var _identity2 = require('lodash/identity');var _identity3 = _interopRequireDefault(_identity2);var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.default =







































































































































chainableGenerator;exports.










chainableGeneratorWithDefaults = chainableGeneratorWithDefaults;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}} /**
he default options for a new chain link.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * These will all be cast as functions so that users
can provide functional options if desired.
type {Object}
var defaultChainlinkOptions = { prefix: null, suffix: null, sanitize: _identity3.default, separator: '.', sanitizeLinks: _identity3.default, handleLinkInvocation: _noop3.default }; /**
he functional negation of _.isString
function
var isNotString = (0, _negate6.default)(_isString3.default); /**
ilters an array by removing all occurrences of `null` and `undefined`.
function
var removeNilValues = (0, _filter3.default)((0, _negate4.default)(_isNil3.default)); /**
onverts non-function values to a function.
function
var maybeCastFunction = function maybeCastFunction(thing) {return (0, _isFunction3.default)(thing) ? thing : (0, _constant3.default)(thing);}; /**
onverts all chainlink options to functions.
function
var functionalizeChainlinkOptions = (0, _compose3.default)((0, _mapValues3.default)(maybeCastFunction), (0, _pick3.default)((0, _keys3.default)(defaultChainlinkOptions))); /**
reates a function that gets the string representation of a chainlink.
returns {string} This chainlink's string value.
function chainlinkToString(properties) {return function () {var tokens = properties.tokens,prefix = properties.prefix,suffix = properties.suffix,sanitize = properties.sanitize,separator = properties.separator,sanitizeLinks = properties.sanitizeLinks;var expanded = [prefix(properties)].concat(_toConsumableArray(tokens.map(sanitizeLinks)), [suffix(properties)]);return sanitize(removeNilValues(expanded).join(separator(properties)));};} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Creates a new chainlink.
param {Object} options Chainlink creation options.
param {function} makeChildlink A function to create a childlinks.
returns {Object|function} The new chainlink.
function makeChainlink(_ref, makeChildlink) {var _ref$tokens = _ref.tokens,tokens = _ref$tokens === undefined ? [] : _ref$tokens,options = _objectWithoutProperties(_ref, ['tokens']);var chainlinkOptionsWithDefaults = (0, _defaults3.default)(options, defaultChainlinkOptions);var properties = _extends({ property: null }, chainlinkOptionsWithDefaults, functionalizeChainlinkOptions(chainlinkOptionsWithDefaults), { // Intentional: to prevent node from borking out when using a function
    // as a base and attempting to util.inspect or console.log the function.
    inspect: undefined, tokens: tokens });Object.assign(properties, { toString: chainlinkToString(_extends({}, properties)) }); // The "base" of the chainlink can be either an object or function
  // if `functionalChainlinks` is true, chainlinks will be functions
  // and will be callable (left up the the user to implement).
  var base = !options.invocableLinks ? {} : function chainlink() {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}properties.handleLinkInvocation.apply(properties, [_extends({}, properties)].concat(args));return makeChildlink(base);};return Object.assign(base, properties);} /**
                                                                                                                                                                                                                                                                                                                                                        * Creates a new Proxy object for the given chainlink.
                                                                                                                                                                                                                                                                                                                                                        * @param {Object|function} chainlink The chainlink to create the proxy for.
                                                                                                                                                                                                                                                                                                                                                        * @param {function} makeChildlink A function to create a childlink if the
                                                                                                                                                                                                                                                                                                                                                        * desired property doesn't exist on the current chainlink.
                                                                                                                                                                                                                                                                                                                                                        * @returns
                                                                                                                                                                                                                                                                                                                                                        * @export
                                                                                                                                                                                                                                                                                                                                                        */function proxifyChainlink(chainlink, makeChildlink) {return new Proxy(chainlink, { /**
                                                                                                                                                                                                                                                                                                                                                                                                                                              * A proxy trap that will return the requested property if it exists on
                                                                                                                                                                                                                                                                                                                                                                                                                                              * the target's prototype, or return a "child chainlink" if not. Here,
                                                                                                                                                                                                                                                                                                                                                                                                                                              * we don't care about non-string properties, since we can't handle
                                                                                                                                                                                                                                                                                                                                                                                                                                              * them anyways (the user using x.y.z will always produce a string).
                                                                                                                                                                                                                                                                                                                                                                                                                                              * @param {Object} target The chainable object which is being accessed.
                                                                                                                                                                                                                                                                                                                                                                                                                                              * @param {string|Symbol} key The name of the property being accessed.
                                                                                                                                                                                                                                                                                                                                                                                                                                              * @returns {any} The actual value of target[key] or a child chainlink.
                                                                                                                                                                                                                                                                                                                                                                                                                                              */get: function get(target, key) {if (key in target || isNotString(key)) return target[key];return makeChildlink(_extends({}, chainlink, { property: key, tokens: [].concat(_toConsumableArray(chainlink.tokens), [key]) }));} });} /**
enerates chainables and their proxy objects.
param {Object} settings The settings used to create the chainable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * @param {function} childlinkGenerator The method used to create children of this link.
his is used by `chainableGeneratorWithDefaults` to mixin default options.
returns {Proxy} The chainable's proxy object.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * @export
function chainableGenerator() {var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var options = (0, _isString3.default)(settings) ? { prefix: settings } : settings;return proxifyChainlink(makeChainlink(options, chainableGenerator), chainableGenerator);} /**
reates a function that will create chainable objects
param {Object} defaults The default options for this chainable object.
returns {function} A function that will create new chainable objects, with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * the supplied defaults mixed in with the options provided to the function.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       */function chainableGeneratorWithDefaults() {var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};return function (settings) {return chainableGenerator((0, _defaults3.default)({}, settings, defaults));};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
