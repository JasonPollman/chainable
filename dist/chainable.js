'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _pick2 = require('lodash/fp/pick');var _pick3 = _interopRequireDefault(_pick2);var _mapValues2 = require('lodash/fp/mapValues');var _mapValues3 = _interopRequireDefault(_mapValues2);var _compose2 = require('lodash/fp/compose');var _compose3 = _interopRequireDefault(_compose2);var _isNil2 = require('lodash/fp/isNil');var _isNil3 = _interopRequireDefault(_isNil2);var _negate3 = require('lodash/fp/negate');var _negate4 = _interopRequireDefault(_negate3);var _filter2 = require('lodash/fp/filter');var _filter3 = _interopRequireDefault(_filter2);var _partial2 = require('lodash/partial');var _partial3 = _interopRequireDefault(_partial2);var _defaults2 = require('lodash/defaults');var _defaults3 = _interopRequireDefault(_defaults2);var _keys2 = require('lodash/keys');var _keys3 = _interopRequireDefault(_keys2);var _constant2 = require('lodash/constant');var _constant3 = _interopRequireDefault(_constant2);var _isFunction2 = require('lodash/isFunction');var _isFunction3 = _interopRequireDefault(_isFunction2);var _isString2 = require('lodash/isString');var _isString3 = _interopRequireDefault(_isString2);var _negate5 = require('lodash/negate');var _negate6 = _interopRequireDefault(_negate5);var _noop2 = require('lodash/noop');var _noop3 = _interopRequireDefault(_noop2);var _identity2 = require('lodash/identity');var _identity3 = _interopRequireDefault(_identity2);var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.







































































































































chainableGenerator = chainableGenerator;exports.










chainableGeneratorWithDefaults = chainableGeneratorWithDefaults;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}} /**
he default options for a new chain link.
hese will all be cast as functions so that users
can provide functional options if desired.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * @type {Object}
var defaultChainlinkOptions = { prefix: null, suffix: null, sanitize: _identity3.default, separator: '.', sanitizeLinks: _identity3.default, handleLinkInvocation: _noop3.default }; /**
he functional negation of _.isString
function
var isNotString = (0, _negate6.default)(_isString3.default); /**
ilters an array by removing all occurrences of `null` and `undefined`.
function
var removeNilValues = (0, _filter3.default)((0, _negate4.default)(_isNil3.default)); /**
onverts non-function values to a function.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * @function
var maybeCastFunction = function maybeCastFunction(thing) {return (0, _isFunction3.default)(thing) ? thing : (0, _constant3.default)(thing);}; /**
onverts all chainlink options to functions.
function
var functionalizeChainlinkOptions = (0, _compose3.default)((0, _mapValues3.default)(maybeCastFunction), (0, _pick3.default)((0, _keys3.default)(defaultChainlinkOptions))); /**
reates a function that gets the string representation of a chainlink.
returns {string} This chainlink's string value.
function chainlinkToString(properties) {return function () {var tokens = properties.tokens,prefix = properties.prefix,suffix = properties.suffix,sanitize = properties.sanitize,separator = properties.separator,sanitizeLinks = properties.sanitizeLinks;var expanded = [prefix(properties)].concat(_toConsumableArray(tokens.map(sanitizeLinks)), [suffix(properties)]);return sanitize(removeNilValues(expanded).join(separator(properties)));};} /**
reates a new chainlink.
param {Object} options Chainlink creation options.
param {function} makeChildlink A function to create a childlinks.
returns {Object|function} The new chainlink.
function makeChainlink(_ref, makeChildlink) {var _ref$tokens = _ref.tokens,tokens = _ref$tokens === undefined ? [] : _ref$tokens,options = _objectWithoutProperties(_ref, ['tokens']);var chainlinkOptionsWithDefaults = (0, _defaults3.default)(options, defaultChainlinkOptions);var properties = _extends({ property: null }, chainlinkOptionsWithDefaults, functionalizeChainlinkOptions(chainlinkOptionsWithDefaults), { // Intentional: to prevent node from borking out when using a function
    // as a base and attempting to util.inspect or console.log the function.
    inspect: undefined, tokens: tokens });Object.assign(properties, { toString: chainlinkToString(_extends({}, properties)) }); // The "base" of the chainlink can be either an object or function
  // if `functionalChainlinks` is true, chainlinks will be functions
  // and will be callable (left up the the user to implement).
  var base = !options.invocableLinks ? {} : function chainlink() {properties.handleLinkInvocation(_extends({}, properties));return makeChildlink(base);};return Object.assign(base, properties);} /**
                                                                                                                                                                                                   * Creates a new Proxy object for the given chainlink.
                                                                                                                                                                                                   * @param {Object|function} chainlink The chainlink to create the proxy for.
                                                                                                                                                                                                   * @param {function} makeChildlink A function to create a childlink if the
                                                                                                                                                                                                   * desired property doesn't exist on the current chainlink.
                                                                                                                                                                                                   * @returns
                                                                                                                                                                                                   * @export
                                                                                                                                                                                                   */function proxifyChainlink(chainlink, makeChildlink) {return new Proxy(chainlink, { /**
                                                                                                                                                                                                                                                                                         * A proxy trap that will return the requested property if it exists on
                                                                                                                                                                                                                                                                                         * the target's prototype, or return a "child chainlink" if not. Here,
                                                                                                                                                                                                                                                                                         * we don't care about non-string properties, since we can't handle
                                                                                                                                                                                                                                                                                         * them anyways (the user using x.y.z will always produce a string).
                                                                                                                                                                                                                                                                                         * @param {Object} target The chainable object which is being accessed.
                                                                                                                                                                                                                                                                                         * @param {string|Symbol} key The name of the property being accessed.
                                                                                                                                                                                                                                                                                         * @returns {any} The actual value of target[key] or a child chainlink.
                                                                                                                                                                                                                                                                                         */get: function get(target, key) {if (key in target || isNotString(key)) return target[key];return makeChildlink(_extends({}, chainlink, { property: key, tokens: [].concat(_toConsumableArray(chainlink.tokens), [key]) }));} });} /**
enerates chainables and their proxy objects.
param {Object} settings The settings used to create the chainable.
param {function} childlinkGenerator The method used to create children of this link.
his is used by `chainableGeneratorWithDefaults` to mixin default options.
returns {Proxy} The chainable's proxy object.
export
function chainableGenerator() {var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var options = (0, _isString3.default)(settings) ? { prefix: settings } : settings;return proxifyChainlink(makeChainlink(options, chainableGenerator), chainableGenerator);} /**
reates a function that will create chainable objects
param {Object} defaults The default options for this chainable object.
returns {function} A function that will create new chainable objects, with
the supplied defaults mixed in with the options provided to the function.
function chainableGeneratorWithDefaults() {var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};return function (settings) {return chainableGenerator((0, _defaults3.default)(settings, defaults));};} // Creates the default chainable creation function
// that takes in options and returns a chainable proxy.
exports.default = (0, _partial3.default)(chainableGenerator, _partial3.default.placeholder, chainableGenerator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGFpbmFibGUuanMiXSwibmFtZXMiOlsiY2hhaW5hYmxlR2VuZXJhdG9yIiwiY2hhaW5hYmxlR2VuZXJhdG9yV2l0aERlZmF1bHRzIiwiZGVmYXVsdENoYWlubGlua09wdGlvbnMiLCJwcmVmaXgiLCJzdWZmaXgiLCJzYW5pdGl6ZSIsInNlcGFyYXRvciIsInNhbml0aXplTGlua3MiLCJoYW5kbGVMaW5rSW52b2NhdGlvbiIsImlzTm90U3RyaW5nIiwicmVtb3ZlTmlsVmFsdWVzIiwibWF5YmVDYXN0RnVuY3Rpb24iLCJ0aGluZyIsImZ1bmN0aW9uYWxpemVDaGFpbmxpbmtPcHRpb25zIiwiY2hhaW5saW5rVG9TdHJpbmciLCJwcm9wZXJ0aWVzIiwidG9rZW5zIiwiZXhwYW5kZWQiLCJtYXAiLCJqb2luIiwibWFrZUNoYWlubGluayIsIm1ha2VDaGlsZGxpbmsiLCJvcHRpb25zIiwiY2hhaW5saW5rT3B0aW9uc1dpdGhEZWZhdWx0cyIsInByb3BlcnR5IiwiaW5zcGVjdCIsInVuZGVmaW5lZCIsIk9iamVjdCIsImFzc2lnbiIsInRvU3RyaW5nIiwiYmFzZSIsImludm9jYWJsZUxpbmtzIiwiY2hhaW5saW5rIiwicHJveGlmeUNoYWlubGluayIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0Iiwia2V5Iiwic2V0dGluZ3MiLCJkZWZhdWx0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdJZ0JBLGtCLEdBQUFBLGtCOzs7Ozs7Ozs7OztBQVdBQyw4QixHQUFBQSw4Qiw2ZUFoSmhCOzs7OzsraUJBTUEsSUFBTUMsMEJBQTBCLEVBQzlCQyxRQUFRLElBRHNCLEVBRTlCQyxRQUFRLElBRnNCLEVBRzlCQyw0QkFIOEIsRUFJOUJD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UUFBVixFQUF2QixHQUE4Q0EsUUFBOUQsQ0FDQSxPQUFPTCxpQkFBaUJiLGNBQWNFLE9BQWQsRUFBdUJ0QixrQkFBdkIsQ0FBakIsRUFBNkRBLGtCQUE3RCxDQUFQLENBQ0QsQyxDQUVEOzs7OztveUJBTU8sU0FBU0MsOEJBQVQsR0FBdUQsS0FBZnNDLFFBQWUsdUVBQUosRUFBSSxDQUM1RCxPQUFPLDRCQUFZdkMsbUJBQW1CLHdCQUFXc0MsUUFBWCxFQUFxQkMsUUFBckIsQ0FBbkIsQ0FBWixFQUFQLENBQ0QsQyxDQUVEO0FBQ0E7a0JBQ2UsdUJBQVV2QyxrQkFBVixpQ0FBaUNBLGtCQUFqQyxDIiwiZmlsZSI6ImNoYWluYWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgZnAgZnJvbSAnbG9kYXNoL2ZwJztcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciBhIG5ldyBjaGFpbiBsaW5rLlxuICogVGhlc2Ugd2lsbCBhbGwgYmUgY2FzdCBhcyBmdW5jdGlvbnMgc28gdGhhdCB1c2Vyc1xuICogY2FuIHByb3ZpZGUgZnVuY3Rpb25hbCBvcHRpb25zIGlmIGRlc2lyZWQuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jb25zdCBkZWZhdWx0Q2hhaW5saW5rT3B0aW9ucyA9IHtcbiAgcHJlZml4OiBudWxsLFxuICBzdWZmaXg6IG51bGwsXG4gIHNhbml0aXplOiBfLmlkZW50aXR5LFxuICBzZXBhcmF0b3I6ICcuJyxcbiAgc2FuaXRpemVMaW5rczogXy5pZGVudGl0eSxcbiAgaGFuZGxlTGlua0ludm9jYXRpb246IF8ubm9vcCxcbn07XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uYWwgbmVnYXRpb24gb2YgXy5pc1N0cmluZ1xuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGlzTm90U3RyaW5nID0gXy5uZWdhdGUoXy5pc1N0cmluZyk7XG5cbi8qKlxuICogRmlsdGVycyBhbiBhcnJheSBieSByZW1vdmluZyBhbGwgb2NjdXJyZW5jZXMgb2YgYG51bGxgIGFuZCBgdW5kZWZpbmVkYC5cbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZW1vdmVOaWxWYWx1ZXMgPSBmcC5maWx0ZXIoZnAubmVnYXRlKGZwLmlzTmlsKSk7XG5cbi8qKlxuICogQ29udmVydHMgbm9uLWZ1bmN0aW9uIHZhbHVlcyB0byBhIGZ1bmN0aW9uLlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IG1heWJlQ2FzdEZ1bmN0aW9uID0gdGhpbmcgPT4gKF8uaXNGdW5jdGlvbih0aGluZykgPyB0aGluZyA6IF8uY29uc3RhbnQodGhpbmcpKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbGwgY2hhaW5saW5rIG9wdGlvbnMgdG8gZnVuY3Rpb25zLlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZ1bmN0aW9uYWxpemVDaGFpbmxpbmtPcHRpb25zID0gZnAuY29tcG9zZShcbiAgZnAubWFwVmFsdWVzKG1heWJlQ2FzdEZ1bmN0aW9uKSxcbiAgZnAucGljayhfLmtleXMoZGVmYXVsdENoYWlubGlua09wdGlvbnMpKSxcbik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hhaW5saW5rLlxuICogQHJldHVybnMge3N0cmluZ30gVGhpcyBjaGFpbmxpbmsncyBzdHJpbmcgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGNoYWlubGlua1RvU3RyaW5nKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0b2tlbnMsXG4gICAgICBwcmVmaXgsXG4gICAgICBzdWZmaXgsXG4gICAgICBzYW5pdGl6ZSxcbiAgICAgIHNlcGFyYXRvcixcbiAgICAgIHNhbml0aXplTGlua3MsXG4gICAgfSA9IHByb3BlcnRpZXM7XG5cbiAgICBjb25zdCBleHBhbmRlZCA9IFtwcmVmaXgocHJvcGVydGllcyksIC4uLnRva2Vucy5tYXAoc2FuaXRpemVMaW5rcyksIHN1ZmZpeChwcm9wZXJ0aWVzKV07XG4gICAgcmV0dXJuIHNhbml0aXplKHJlbW92ZU5pbFZhbHVlcyhleHBhbmRlZCkuam9pbihzZXBhcmF0b3IocHJvcGVydGllcykpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGNoYWlubGluay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENoYWlubGluayBjcmVhdGlvbiBvcHRpb25zLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWFrZUNoaWxkbGluayBBIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGNoaWxkbGlua3MuXG4gKiBAcmV0dXJucyB7T2JqZWN0fGZ1bmN0aW9ufSBUaGUgbmV3IGNoYWlubGluay5cbiAqL1xuZnVuY3Rpb24gbWFrZUNoYWlubGluayh7IHRva2VucyA9IFtdLCAuLi5vcHRpb25zIH0sIG1ha2VDaGlsZGxpbmspIHtcbiAgY29uc3QgY2hhaW5saW5rT3B0aW9uc1dpdGhEZWZhdWx0cyA9IF8uZGVmYXVsdHMob3B0aW9ucywgZGVmYXVsdENoYWlubGlua09wdGlvbnMpO1xuXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgcHJvcGVydHk6IG51bGwsXG4gICAgLi4uY2hhaW5saW5rT3B0aW9uc1dpdGhEZWZhdWx0cyxcbiAgICAuLi5mdW5jdGlvbmFsaXplQ2hhaW5saW5rT3B0aW9ucyhjaGFpbmxpbmtPcHRpb25zV2l0aERlZmF1bHRzKSxcbiAgICAvLyBJbnRlbnRpb25hbDogdG8gcHJldmVudCBub2RlIGZyb20gYm9ya2luZyBvdXQgd2hlbiB1c2luZyBhIGZ1bmN0aW9uXG4gICAgLy8gYXMgYSBiYXNlIGFuZCBhdHRlbXB0aW5nIHRvIHV0aWwuaW5zcGVjdCBvciBjb25zb2xlLmxvZyB0aGUgZnVuY3Rpb24uXG4gICAgaW5zcGVjdDogdW5kZWZpbmVkLFxuICAgIHRva2VucyxcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKHByb3BlcnRpZXMsIHsgdG9TdHJpbmc6IGNoYWlubGlua1RvU3RyaW5nKHsgLi4ucHJvcGVydGllcyB9KSB9KTtcblxuICAvLyBUaGUgXCJiYXNlXCIgb2YgdGhlIGNoYWlubGluayBjYW4gYmUgZWl0aGVyIGFuIG9iamVjdCBvciBmdW5jdGlvblxuICAvLyBpZiBgZnVuY3Rpb25hbENoYWlubGlua3NgIGlzIHRydWUsIGNoYWlubGlua3Mgd2lsbCBiZSBmdW5jdGlvbnNcbiAgLy8gYW5kIHdpbGwgYmUgY2FsbGFibGUgKGxlZnQgdXAgdGhlIHRoZSB1c2VyIHRvIGltcGxlbWVudCkuXG4gIGNvbnN0IGJhc2UgPSAhb3B0aW9ucy5pbnZvY2FibGVMaW5rcyA/IHt9IDogZnVuY3Rpb24gY2hhaW5saW5rKCkge1xuICAgIHByb3BlcnRpZXMuaGFuZGxlTGlua0ludm9jYXRpb24oeyAuLi5wcm9wZXJ0aWVzIH0pO1xuICAgIHJldHVybiBtYWtlQ2hpbGRsaW5rKGJhc2UpO1xuICB9O1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGJhc2UsIHByb3BlcnRpZXMpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUHJveHkgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gY2hhaW5saW5rLlxuICogQHBhcmFtIHtPYmplY3R8ZnVuY3Rpb259IGNoYWlubGluayBUaGUgY2hhaW5saW5rIHRvIGNyZWF0ZSB0aGUgcHJveHkgZm9yLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWFrZUNoaWxkbGluayBBIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGNoaWxkbGluayBpZiB0aGVcbiAqIGRlc2lyZWQgcHJvcGVydHkgZG9lc24ndCBleGlzdCBvbiB0aGUgY3VycmVudCBjaGFpbmxpbmsuXG4gKiBAcmV0dXJuc1xuICogQGV4cG9ydFxuICovXG5mdW5jdGlvbiBwcm94aWZ5Q2hhaW5saW5rKGNoYWlubGluaywgbWFrZUNoaWxkbGluaykge1xuICByZXR1cm4gbmV3IFByb3h5KGNoYWlubGluaywge1xuICAgIC8qKlxuICAgICAqIEEgcHJveHkgdHJhcCB0aGF0IHdpbGwgcmV0dXJuIHRoZSByZXF1ZXN0ZWQgcHJvcGVydHkgaWYgaXQgZXhpc3RzIG9uXG4gICAgICogdGhlIHRhcmdldCdzIHByb3RvdHlwZSwgb3IgcmV0dXJuIGEgXCJjaGlsZCBjaGFpbmxpbmtcIiBpZiBub3QuIEhlcmUsXG4gICAgICogd2UgZG9uJ3QgY2FyZSBhYm91dCBub24tc3RyaW5nIHByb3BlcnRpZXMsIHNpbmNlIHdlIGNhbid0IGhhbmRsZVxuICAgICAqIHRoZW0gYW55d2F5cyAodGhlIHVzZXIgdXNpbmcgeC55Lnogd2lsbCBhbHdheXMgcHJvZHVjZSBhIHN0cmluZykuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgY2hhaW5hYmxlIG9iamVjdCB3aGljaCBpcyBiZWluZyBhY2Nlc3NlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xTeW1ib2x9IGtleSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgYmVpbmcgYWNjZXNzZWQuXG4gICAgICogQHJldHVybnMge2FueX0gVGhlIGFjdHVhbCB2YWx1ZSBvZiB0YXJnZXRba2V5XSBvciBhIGNoaWxkIGNoYWlubGluay5cbiAgICAgKi9cbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgaW4gdGFyZ2V0IHx8IGlzTm90U3RyaW5nKGtleSkpIHJldHVybiB0YXJnZXRba2V5XTtcblxuICAgICAgcmV0dXJuIG1ha2VDaGlsZGxpbmsoe1xuICAgICAgICAuLi5jaGFpbmxpbmssXG4gICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgIHRva2VuczogWy4uLmNoYWlubGluay50b2tlbnMsIGtleV0sXG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgY2hhaW5hYmxlcyBhbmQgdGhlaXIgcHJveHkgb2JqZWN0cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5ncyBUaGUgc2V0dGluZ3MgdXNlZCB0byBjcmVhdGUgdGhlIGNoYWluYWJsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNoaWxkbGlua0dlbmVyYXRvciBUaGUgbWV0aG9kIHVzZWQgdG8gY3JlYXRlIGNoaWxkcmVuIG9mIHRoaXMgbGluay5cbiAqIFRoaXMgaXMgdXNlZCBieSBgY2hhaW5hYmxlR2VuZXJhdG9yV2l0aERlZmF1bHRzYCB0byBtaXhpbiBkZWZhdWx0IG9wdGlvbnMuXG4gKiBAcmV0dXJucyB7UHJveHl9IFRoZSBjaGFpbmFibGUncyBwcm94eSBvYmplY3QuXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbmFibGVHZW5lcmF0b3Ioc2V0dGluZ3MgPSB7fSkge1xuICBjb25zdCBvcHRpb25zID0gXy5pc1N0cmluZyhzZXR0aW5ncykgPyB7IHByZWZpeDogc2V0dGluZ3MgfSA6IHNldHRpbmdzO1xuICByZXR1cm4gcHJveGlmeUNoYWlubGluayhtYWtlQ2hhaW5saW5rKG9wdGlvbnMsIGNoYWluYWJsZUdlbmVyYXRvciksIGNoYWluYWJsZUdlbmVyYXRvcik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjcmVhdGUgY2hhaW5hYmxlIG9iamVjdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0cyBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGlzIGNoYWluYWJsZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGNyZWF0ZSBuZXcgY2hhaW5hYmxlIG9iamVjdHMsIHdpdGhcbiAqIHRoZSBzdXBwbGllZCBkZWZhdWx0cyBtaXhlZCBpbiB3aXRoIHRoZSBvcHRpb25zIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYWluYWJsZUdlbmVyYXRvcldpdGhEZWZhdWx0cyhkZWZhdWx0cyA9IHt9KSB7XG4gIHJldHVybiBzZXR0aW5ncyA9PiBjaGFpbmFibGVHZW5lcmF0b3IoXy5kZWZhdWx0cyhzZXR0aW5ncywgZGVmYXVsdHMpKTtcbn1cblxuLy8gQ3JlYXRlcyB0aGUgZGVmYXVsdCBjaGFpbmFibGUgY3JlYXRpb24gZnVuY3Rpb25cbi8vIHRoYXQgdGFrZXMgaW4gb3B0aW9ucyBhbmQgcmV0dXJucyBhIGNoYWluYWJsZSBwcm94eS5cbmV4cG9ydCBkZWZhdWx0IF8ucGFydGlhbChjaGFpbmFibGVHZW5lcmF0b3IsIF8sIGNoYWluYWJsZUdlbmVyYXRvcik7XG4iXX0=
