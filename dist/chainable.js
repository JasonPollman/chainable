'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.chainableGeneratorWithDefaults = undefined;var _pick2 = require('lodash/fp/pick');var _pick3 = _interopRequireDefault(_pick2);var _mapValues2 = require('lodash/fp/mapValues');var _mapValues3 = _interopRequireDefault(_mapValues2);var _compose2 = require('lodash/fp/compose');var _compose3 = _interopRequireDefault(_compose2);var _isNil2 = require('lodash/fp/isNil');var _isNil3 = _interopRequireDefault(_isNil2);var _negate3 = require('lodash/fp/negate');var _negate4 = _interopRequireDefault(_negate3);var _filter2 = require('lodash/fp/filter');var _filter3 = _interopRequireDefault(_filter2);var _partial2 = require('lodash/partial');var _partial3 = _interopRequireDefault(_partial2);var _defaults2 = require('lodash/defaults');var _defaults3 = _interopRequireDefault(_defaults2);var _keys2 = require('lodash/keys');var _keys3 = _interopRequireDefault(_keys2);var _constant2 = require('lodash/constant');var _constant3 = _interopRequireDefault(_constant2);var _isFunction2 = require('lodash/isFunction');var _isFunction3 = _interopRequireDefault(_isFunction2);var _isString2 = require('lodash/isString');var _isString3 = _interopRequireDefault(_isString2);var _negate5 = require('lodash/negate');var _negate6 = _interopRequireDefault(_negate5);var _noop2 = require('lodash/noop');var _noop3 = _interopRequireDefault(_noop2);var _identity2 = require('lodash/identity');var _identity3 = _interopRequireDefault(_identity2);var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.


















































































































































chainableGenerator = chainableGenerator;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}} /**
he default options for a new chain link.
hese will all be cast as functions, so that users can
provide functional options.
type {Object}
var defaultChainlinkOptions = { prefix: null, suffix: null, sanitize: _identity3.default, separator: '.', handleLinkInvocation: _noop3.default }; /**
he functional negation of _.isString
function
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */var isNotString = (0, _negate6.default)(_isString3.default); /**
ilters an array, removing `null` and `undefined`.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * @function
var removeNilValues = (0, _filter3.default)((0, _negate4.default)(_isNil3.default)); /**
onverts non-function values to a function
that returns the original input value.
function
var maybeCastFunction = function maybeCastFunction(thing) {return (0, _isFunction3.default)(thing) ? thing : (0, _constant3.default)(thing);}; /**
onverts all chainlink options to functions.
function
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    */var functionalizeChainlinkOptions = (0, _compose3.default)((0, _mapValues3.default)(maybeCastFunction), (0, _pick3.default)((0, _keys3.default)(defaultChainlinkOptions))); /**
ets the string representation of a chainlink.
returns {string} This chainlink's string value.
function chainlinkToString() {var prefix = this.prefix,suffix = this.suffix,sanitize = this.sanitize,separator = this.separator;var expanded = [prefix(this)].concat(_toConsumableArray(this.tokens.map(sanitize)), [suffix(this)]);return removeNilValues(expanded).join(separator(this));} /**
reates a method that's called when the associated chainlink is invoked.
param {Object} properties The chainlink's property set.
returns {function} The chainlink's invocable base.
function handleChainlinkInvocation(properties) {return function chainlink() {var options = _extends({}, properties);this.handleLinkInvocation.call(options, options);return this;};} /**
reates a new chainlink.
param {Object} options Chainlink creation options.
returns {Object|function} The new chainlink.
function makeChainlink() {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$tokens = _ref.tokens,tokens = _ref$tokens === undefined ? [] : _ref$tokens,_ref$functionalChainl = _ref.functionalChainlinks,functionalChainlinks = _ref$functionalChainl === undefined ? false : _ref$functionalChainl,options = _objectWithoutProperties(_ref, ['tokens', 'functionalChainlinks']);var chainlinkOptionsWithDefaults = (0, _defaults3.default)(options, defaultChainlinkOptions); // The set of properties the chainlink will contain.
  // The "base" of the chainlink can be either an object or function
  // if `functionalChainlinks` is true, chainlinks will be functions
  // and will be callable (left up the the user to implement).
  var properties = _extends({ property: null }, chainlinkOptionsWithDefaults, functionalizeChainlinkOptions(chainlinkOptionsWithDefaults), { tokens: tokens, toString: chainlinkToString, // Intentional: to prevent node from borking out when using a function
    // as a base and attempting to util.inspect or console.log the function.
    inspect: undefined });var base = functionalChainlinks ? handleChainlinkInvocation(properties) : {};return Object.assign(base, properties);} /**
                                                                                                                                                 * Creates a new Proxy object for the given chainlink.
                                                                                                                                                 * @param {Object|function} chainlink The chainlink to create the proxy for.
                                                                                                                                                 * @param {function} makeChildlink A function to create a childlink if the
                                                                                                                                                 * desired property doesn't exist on the current chainlink.
                                                                                                                                                 * @returns
                                                                                                                                                 * @export
                                                                                                                                                 */function proxifyChainlink(chainlink, makeChildlink) {return new Proxy(chainlink, { /**
                                                                                                                                                                                                                                       * A proxy trap that will return the requested property if it exists on
                                                                                                                                                                                                                                       * the target's prototype, or return a "child chainlink" if not. Here,
                                                                                                                                                                                                                                       * we don't care about non-string properties, since we can't handle
                                                                                                                                                                                                                                       * them anyways (the user using x.y.z will always produce a string).
                                                                                                                                                                                                                                       * @param {Object} target The chainable object which is being accessed.
                                                                                                                                                                                                                                       * @param {string|Symbol} key The name of the property being accessed.
                                                                                                                                                                                                                                       * @returns {any} The actual value of target[key] or a child chainlink.
                                                                                                                                                                                                                                       */get: function get(target, key) {if (key in target || isNotString(key)) return target[key];return makeChildlink(_extends({}, chainlink, { property: key, tokens: [].concat(_toConsumableArray(chainlink.tokens), [key]) }));} });} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Generates chainables and their proxy objects.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @param {Object} settings The settings used to create the chainable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @param {function} childlinkGenerator The method used to create children of this link.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * This is used by `chainableGeneratorWithDefaults` to mixin default options.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @returns {Proxy} The chainable's proxy object.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @export
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */function chainableGenerator() {var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var childlinkGenerator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : chainableGenerator;var options = (0, _isString3.default)(settings) ? { prefix: settings } : settings;return proxifyChainlink(makeChainlink(options), childlinkGenerator);} /**
reates a function that will create chainable objects
param {Object} defaults The default options for this chainable object.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */var chainableGeneratorWithDefaults = exports.chainableGeneratorWithDefaults = function chainableGeneratorWithDefaults() {var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var childlinkGenerator = chainableGeneratorWithDefaults(defaults);return function (settings) {return chainableGenerator((0, _defaults3.default)(settings, defaults), childlinkGenerator);};}; // Creates the default chainable creation function
// that takes in options and returns a chainable proxy.
exports.default = (0, _partial3.default)(chainableGenerator, _partial3.default.placeholder, chainableGenerator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
